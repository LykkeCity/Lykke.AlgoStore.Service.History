// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.Service.History.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class FunctionChartingUpdate
    {
        /// <summary>
        /// Initializes a new instance of the FunctionChartingUpdate class.
        /// </summary>
        public FunctionChartingUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FunctionChartingUpdate class.
        /// </summary>
        public FunctionChartingUpdate(string functionName, double value, string instanceId, System.DateTime calculatedOn, IList<FunctionChartingUpdate> innerFunctions)
        {
            FunctionName = functionName;
            Value = value;
            InstanceId = instanceId;
            CalculatedOn = calculatedOn;
            InnerFunctions = innerFunctions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FunctionName")]
        public string FunctionName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Value")]
        public double Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InstanceId")]
        public string InstanceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CalculatedOn")]
        public System.DateTime CalculatedOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InnerFunctions")]
        public IList<FunctionChartingUpdate> InnerFunctions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FunctionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FunctionName");
            }
            if (InstanceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstanceId");
            }
            if (InnerFunctions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InnerFunctions");
            }
            if (InnerFunctions != null)
            {
                foreach (var element in InnerFunctions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
