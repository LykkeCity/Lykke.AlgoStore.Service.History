// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.Service.History.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HistoryAPI.
    /// </summary>
    public static partial class HistoryAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startFrom'>
            /// The start of the period to get candles for (inclusive)
            /// </param>
            /// <param name='endOn'>
            /// The end of the period to get candles for (exclusive)
            /// </param>
            /// <param name='assetPair'>
            /// The asset pair to get candles for
            /// </param>
            /// <param name='candleTimeInterval'>
            /// The candle time interval to get candles for. Possible values include:
            /// 'Unspecified', 'Sec', 'Minute', 'Min5', 'Min15', 'Min30', 'Hour', 'Hour4',
            /// 'Hour6', 'Hour12', 'Day', 'Week', 'Month'
            /// </param>
            /// <param name='indicatorName'>
            /// The name of the indicator to fetch candles for
            /// </param>
            public static object GetCandles(this IHistoryAPI operations, System.DateTime startFrom, System.DateTime endOn, string assetPair, CandleTimeInterval candleTimeInterval, string indicatorName)
            {
                return operations.GetCandlesAsync(startFrom, endOn, assetPair, candleTimeInterval, indicatorName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startFrom'>
            /// The start of the period to get candles for (inclusive)
            /// </param>
            /// <param name='endOn'>
            /// The end of the period to get candles for (exclusive)
            /// </param>
            /// <param name='assetPair'>
            /// The asset pair to get candles for
            /// </param>
            /// <param name='candleTimeInterval'>
            /// The candle time interval to get candles for. Possible values include:
            /// 'Unspecified', 'Sec', 'Minute', 'Min5', 'Min15', 'Min30', 'Hour', 'Hour4',
            /// 'Hour6', 'Hour12', 'Day', 'Week', 'Month'
            /// </param>
            /// <param name='indicatorName'>
            /// The name of the indicator to fetch candles for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCandlesAsync(this IHistoryAPI operations, System.DateTime startFrom, System.DateTime endOn, string assetPair, CandleTimeInterval candleTimeInterval, string indicatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCandlesWithHttpMessagesAsync(startFrom, endOn, assetPair, candleTimeInterval, indicatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            public static object GetFunctionForPeriod(this IHistoryAPI operations, System.DateTime fromParameter, System.DateTime to, string instanceId = default(string))
            {
                return operations.GetFunctionForPeriodAsync(fromParameter, to, instanceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFunctionForPeriodAsync(this IHistoryAPI operations, System.DateTime fromParameter, System.DateTime to, string instanceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFunctionForPeriodWithHttpMessagesAsync(fromParameter, to, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this IHistoryAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this IHistoryAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
